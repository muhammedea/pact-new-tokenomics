{
  "address": "0xc1B3887a2Ca47e2CE8Cd1BB6326f2A442b6E7AFa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oldToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "deployNewPact",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDeployed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x52e03fb1d4d578b0f93a184983bf9e70403092fb600195f1441af7b025e86235",
  "receipt": {
    "to": null,
    "from": "0xc279e226c77B1ad834FcF1F79988A98d37eA244c",
    "contractAddress": "0xc1B3887a2Ca47e2CE8Cd1BB6326f2A442b6E7AFa",
    "transactionIndex": 0,
    "gasUsed": "3862305",
    "logsBloom": "0x
    "blockHash": "0x8f2958c6056cecfa50fe81b2533f30c18dde1778f295158fcbb3cc9e046b2e16",
    "transactionHash": "0x52e03fb1d4d578b0f93a184983bf9e70403092fb600195f1441af7b025e86235",
    "logs": [],
    "blockNumber": 26013513,
    "cumulativeGasUsed": "3862305",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x46c9757c5497c5b1f2eb73ae79b6b67d119b0b58"
  ],
  "numDeployments": 1,
  "solcInputHash": "3d433b96c644751e0feb53a723612da8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"deployNewPact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDeployed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PACTNewTokenDeployer.sol\":\"PACTNewTokenDeployer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/PACTConvert.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\n\\ncontract PACTConvert is ReentrancyGuard, AccessControl, Pausable {\\n    event TokenReleased(address indexed participant, uint256 amount);\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant WHITELISTER_ROLE = keccak256(\\\"WHITELISTER_ROLE\\\");\\n    bytes32 public immutable SEED = keccak256(\\\"PACTConvert\\\");\\n\\n    address public newPACT;\\n    address public oldPACT;\\n    uint256 public startDate;\\n    uint256 public endDate;\\n    uint256 public exchangeRate; // for every 100 oldPACT, how many newPACT\\n    uint256 public totalConvertedOldPACT;\\n    mapping(address => uint256) public accountToConvertedAmount;\\n\\n    constructor(\\n        address _newPACT,\\n        address _oldPACT,\\n        uint256 _startDate,\\n        uint256 _endDate,\\n        uint256 _exchangeRate\\n    ) {\\n        newPACT = _newPACT;\\n        oldPACT = _oldPACT;\\n        startDate = _startDate;\\n        endDate = _endDate;\\n        exchangeRate = _exchangeRate;\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(PAUSER_ROLE, msg.sender);\\n        _grantRole(WHITELISTER_ROLE, msg.sender);\\n    }\\n\\n    //////////  SETTERS ///////////\\n    function setStartDate(uint256 _startDate) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        startDate = _startDate;\\n    }\\n\\n    function setEndDate(uint256 _endDate) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        endDate = _endDate;\\n    }\\n\\n    function setExchangeRate(uint256 _exchangeRate) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        exchangeRate = _exchangeRate;\\n    }\\n    /////////////////////////////////\\n\\n    /**\\n     * @param _oldPACTAmount (type uint256) amount of oldPACT tokens to convert\\n     * @param _maxOldPACTAmount (type uint256) amount of oldPACT tokens the user can convert max\\n     * @param _signature (type bytes) signature that proves that the caller is whitelisted\\n     * @dev convert old ube tokens to new\\n     */\\n    function convert(uint256 _oldPACTAmount, uint256 _maxOldPACTAmount, bytes memory _signature)\\n        public\\n        nonReentrant\\n        whenNotPaused\\n        returns (bool sucess)\\n    {\\n        bytes32 hash = keccak256(abi.encodePacked(SEED, msg.sender, _maxOldPACTAmount));\\n        hash = MessageHashUtils.toEthSignedMessageHash(hash);\\n        (address signer, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, _signature);\\n        require(error == ECDSA.RecoverError.NoError && hasRole(WHITELISTER_ROLE, signer), \\\"You are not whitelisted\\\");\\n\\n        require(block.timestamp >= startDate && block.timestamp <= endDate, \\\"Conversion is not active\\\");\\n        uint256 previouslyConverted = accountToConvertedAmount[msg.sender];\\n        uint256 totalConvertAmount = previouslyConverted + _oldPACTAmount;\\n        require(totalConvertAmount <= _maxOldPACTAmount, \\\"max limit\\\");\\n        accountToConvertedAmount[msg.sender] = totalConvertAmount;\\n        totalConvertedOldPACT += _oldPACTAmount;\\n        IERC20(oldPACT).transferFrom(msg.sender, address(this), _oldPACTAmount);\\n        uint256 newAmount = (_oldPACTAmount * exchangeRate) / 100; //10% of the new token\\n        IERC20(newPACT).transfer(msg.sender, newAmount);\\n        return true;\\n    }\\n\\n    /**\\n     * @param _token (type address) ERC20 token address (can be buyCurrency)\\n     * @param _amount (type uint256) amount of buyCurrency\\n     */\\n    function withdraw(\\n        address to,\\n        address _token,\\n        uint256 _amount\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) returns (bool success) {\\n        if (_token == address(0)) {\\n            (bool result, ) = to.call{value: _amount}(\\\"\\\");\\n            return result;\\n        }\\n        IERC20(_token).transfer(to, _amount);\\n        return true;\\n    }\\n\\n    /////////\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf7c41e0a411aed6836fabbaad41e6683350a87a03ce5fdfb24b4f55eff86212a\",\"license\":\"MIT\"},\"contracts/PACTNewTokenDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./PACTConvert.sol\\\";\\nimport \\\"./PACTToken.sol\\\";\\n\\ncontract PACTNewTokenDeployer {\\n    address public immutable oldToken;\\n    address public immutable operator;\\n    bool public isDeployed;\\n\\n    constructor(address _oldToken) {\\n        oldToken = _oldToken;\\n        operator = msg.sender;\\n    }\\n\\n    function deployNewPact() external {\\n        require(msg.sender == operator, \\\"Only operator\\\");\\n        require(isDeployed == false, \\\"Already deployed\\\");\\n        PACTToken newPact = new PACTToken(address(this));\\n        PACTConvert convert = new PACTConvert(\\n            address(newPact),\\n            oldToken,\\n            block.timestamp,\\n            block.timestamp + (60 * 60 * 24 * 365),\\n            100\\n        );\\n        newPact.transfer(address(convert), 5_000_000_000e18);\\n        newPact.transfer(0x59aAc0b8bd03b7Ba9D391Eb989c3Ea8CdE638144, 25_000_000_000e18);\\n        newPact.transfer(0xBD11CaeA0a854ba328e202ceD2F0269fD8027c6e, 25_000_000_000e18);\\n        newPact.transfer(0x213962Ba8e4cef1D618c88d62D2FFA39eC5Eb22D, 30_000_000_000e18);\\n        newPact.transfer(0x3844cb665cf676B1Eb7C896E04D3E9eC3BAB5a75, 15_000_000_000e18);\\n        convert.grantRole(convert.DEFAULT_ADMIN_ROLE(), operator);\\n        convert.grantRole(convert.WHITELISTER_ROLE(), operator);\\n        convert.grantRole(convert.PAUSER_ROLE(), operator);\\n        isDeployed = true;\\n    }\\n}\\n\",\"keccak256\":\"0x1526ce5bd4f949f2847fae558379bd294ba786ed66274e6bf6a234da1aad226e\",\"license\":\"MIT\"},\"contracts/PACTToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./ubeswap/voting/TransferrableVotingToken.sol\\\";\\n\\ncontract PACTToken is TransferrableVotingToken {\\n    /// @notice The maximum supply of PACT Tokens.\\n    uint128 public constant MAX_SUPPLY = 100_000_000_000e18;\\n\\n    /**\\n     * @notice Construct a new PACT Token\\n     * Note: this contract doesn't specify an initial minter, so there is no way new\\n     * tokens can get created.\\n     * @param _initialOwner The initial account to grant all the tokens\\n     */\\n    constructor(\\n        address _initialOwner\\n    ) TransferrableVotingToken(\\\"impactMarket\\\", \\\"PACT\\\", 18, MAX_SUPPLY, _initialOwner) {}\\n}\\n\",\"keccak256\":\"0xe536f77c16918d5189db8ff10e8872dec95cdc6b3bff6966ddcbb3bb57144462\",\"license\":\"MIT\"},\"contracts/ubeswap/interfaces/IHasVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\n/**\\n * Reads the votes that an account has.\\n */\\ninterface IHasVotes {\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint128);\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint128);\\n}\\n\",\"keccak256\":\"0x08848bbb1d1117f783f4cf1f337c854734cfb5ce7e440cd5f00a675ca18ee028\",\"license\":\"MIT\"},\"contracts/ubeswap/interfaces/INonTransferrableToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\n/**\\n * A token that cannot be transferred.\\n */\\ninterface INonTransferrableToken {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    // Views\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9e761706341588743eeb0bdeec8732766578d53ea3dfc357f3f734c7e0d6e1f8\",\"license\":\"MIT\"},\"contracts/ubeswap/interfaces/IVotingDelegates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\n/**\\n * Interface for a contract that keeps track of voting delegates.\\n */\\ninterface IVotingDelegates {\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /// @notice An event emitted when an account's voting power is transferred.\\n    // - If `from` is `address(0)`, power was minted.\\n    // - If `to` is `address(0)`, power was burned.\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice Name of the contract.\\n    // Required for signing.\\n    function name() external view returns (string memory);\\n\\n    /// @notice A record of each accounts delegate\\n    function delegates(address delegatee) external view returns (address);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Get the amount of voting power of an account\\n     * @param account The address of the account to get the balance of\\n     * @return The amount of voting power held\\n     */\\n    function votingPower(address account) external view returns (uint128);\\n\\n    /// @notice Total voting power in existence.\\n    function totalVotingPower() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0x3e6265a0e88f74c31f4d14a98b32df917a502f06f95f134095b2a49441ba42ac\",\"license\":\"MIT\"},\"contracts/ubeswap/voting/TransferrableVotingToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./VotingToken.sol\\\";\\n\\ncontract TransferrableVotingToken is VotingToken {\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     * @param initialSupply_ Initial supply of tokens\\n     * @param account_ The initial account to grant all the tokens\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        uint128 initialSupply_,\\n        address account_\\n    ) VotingToken(name_, symbol_, decimals_) {\\n        _mintVotes(account_, initialSupply_);\\n    }\\n\\n    ////////////////////////////////\\n    //\\n    // The below code is copied from Uniswap's Uni.sol.\\n    // Changes are marked with \\\"XXX\\\".\\n    //\\n    ////////////////////////////////\\n\\n    // XXX: deleted name, symbol, decimals, totalSupply, minter, mintingAllowedAfter,\\n    // minimumTimeBetweenMints, mintCap\\n\\n    // Allowance amounts on behalf of others\\n    mapping(address => mapping(address => uint128)) internal allowances;\\n\\n    // XXX: balances, delegates, Checkpoint, checkpoints,\\n    // numCheckpoints, DOMAIN_TYPEHASH, DELEGATION_TYPEHASH\\n    // are inherited from VotingPower.sol\\n\\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    // XXX: nonces is inherited from VotingPower.sol\\n\\n    // XXX: deleted MinterChanged\\n\\n    // XXX: deleted DelegateChanged, DelegateVotesChanged, Transfer and moved them to IVotingPower\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    // XXX: deleted constructor, setMinter, mint\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    // XXX_ADDED: upgrade to Solidity 0.8.3, which doesn't allow use of uintn(-1)\\n    uint256 internal constant MAX_INT = 2 ** 256 - 1;\\n    uint128 internal constant MAX_INT_128 = 2 ** 128 - 1;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint rawAmount) external returns (bool) {\\n        uint128 amount;\\n        // XXX: uint256(-1) => MAX_INT\\n        if (rawAmount == MAX_INT) {\\n            // XXX: uint128(-1) => MAX_INT_128\\n            amount = MAX_INT_128;\\n        } else {\\n            amount = safe128(rawAmount, \\\"Uni::approve: amount exceeds 128 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spends\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint rawAmount,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        uint128 amount;\\n        // XXX: uint256(-1) => MAX_INT\\n        if (rawAmount == MAX_INT) {\\n            // XXX: uint128(-1) => MAX_INT_128\\n            amount = MAX_INT_128;\\n        } else {\\n            amount = safe128(rawAmount, \\\"Uni::permit: amount exceeds 128 bits\\\");\\n        }\\n\\n        // XXX_CHANGED: name => name()\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this))\\n        );\\n        bytes32 structHash = keccak256(\\n            abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline)\\n        );\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"Uni::permit: invalid signature\\\");\\n        require(signatory == owner, \\\"Uni::permit: unauthorized\\\");\\n        // XXX: added linter disable\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= deadline, \\\"Uni::permit: signature expired\\\");\\n\\n        allowances[owner][spender] = amount;\\n\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    // XXX: deleted balanceOf\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint rawAmount) external returns (bool) {\\n        // XXX_ADDED\\n        require(\\n            dst != address(this),\\n            \\\"TransferrableVotingToken::transfer: cannot send tokens to contract\\\"\\n        );\\n        uint128 amount = safe128(rawAmount, \\\"Uni::transfer: amount exceeds 128 bits\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\\n        // XXX_ADDED\\n        require(\\n            dst != address(this),\\n            \\\"TransferrableVotingToken::transferFrom: cannot send tokens to contract\\\"\\n        );\\n        address spender = msg.sender;\\n        uint128 spenderAllowance = allowances[src][spender];\\n        uint128 amount = safe128(rawAmount, \\\"Uni::approve: amount exceeds 128 bits\\\");\\n\\n        // XXX: uint128(-1) => MAX_INT_128\\n        if (spender != src && spenderAllowance != MAX_INT_128) {\\n            uint128 newAllowance = sub128(\\n                spenderAllowance,\\n                amount,\\n                \\\"Uni::transferFrom: transfer amount exceeds spender allowance\\\"\\n            );\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    // XXX: rest is in VotingPower.sol\\n}\\n\",\"keccak256\":\"0xf62de867c71147d1c83805b97103fbe0a829a7fa3760cce6dc57dd3adfac9d4f\",\"license\":\"MIT\"},\"contracts/ubeswap/voting/VotingPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"../interfaces/IHasVotes.sol\\\";\\nimport \\\"../interfaces/IVotingDelegates.sol\\\";\\n\\n/**\\n * Power to vote. Heavily based on Uni.\\n */\\ncontract VotingPower is IHasVotes, IVotingDelegates {\\n    // Name of the token. This cannot be changed after creating the token.\\n    string private _name;\\n\\n    // Total amount of voting power available.\\n    uint128 private totalVotingPowerSupply;\\n\\n    constructor(string memory name_) {\\n        _name = name_;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @notice Mint new voting power\\n     * @param dst The address of the destination account\\n     * @param amount The amount of voting power to be minted\\n     */\\n    function _mintVotes(address dst, uint128 amount) internal {\\n        require(dst != address(0), \\\"VotingPower::_mintVotes: cannot mint to the zero address\\\");\\n\\n        // transfer the amount to the recipient\\n        balances[dst] = add128(balances[dst], amount, \\\"VotingPower::_mintVotes: mint amount overflows\\\");\\n        totalVotingPowerSupply = add128(\\n            totalVotingPowerSupply, amount, \\\"VotingPower::_mintVotes: total supply overflows\\\"\\n        );\\n        emit Transfer(address(0), dst, amount);\\n\\n        // move delegates\\n        _moveDelegates(address(0), delegates[dst], amount);\\n    }\\n\\n    /**\\n     * @notice Burn voting power\\n     * @param src The address of the source account\\n     * @param amount The amount of voting power to be burned\\n     */\\n    function _burnVotes(address src, uint128 amount) internal {\\n        require(src != address(0), \\\"VotingPower::_burnVotes: cannot burn from the zero address\\\");\\n\\n        // transfer the amount to the recipient\\n        balances[src] = sub128(balances[src], amount, \\\"VotingPower::_burnVotes: burn amount underflows\\\");\\n        totalVotingPowerSupply = sub128(\\n            totalVotingPowerSupply, amount, \\\"VotingPower::_burnVotes: total supply underflows\\\"\\n        );\\n        emit Transfer(src, address(0), amount);\\n\\n        // move delegates\\n        _moveDelegates(delegates[src], address(0), amount);\\n    }\\n\\n    /**\\n     * @notice Get the amount of voting power of an account\\n     * @param account The address of the account to get the balance of\\n     * @return The amount of voting power held\\n     */\\n    function votingPower(address account) public view override returns (uint128) {\\n        return balances[account];\\n    }\\n\\n    function totalVotingPower() public view override returns (uint128) {\\n        return totalVotingPowerSupply;\\n    }\\n\\n    ////////////////////////////////\\n    //\\n    // The below code is copied from ../uniswap-governance/contracts/Uni.sol.\\n    // Changes are marked with \\\"XXX\\\".\\n    //\\n    ////////////////////////////////\\n\\n    // XXX: deleted name, symbol, decimals, totalSupply, minter, mintingAllowedAfter,\\n    // minimumTimeBetweenMints, mintCap, allowances\\n\\n    // Official record of token balances for each account\\n    // XXX: internal => private visibility\\n    mapping (address => uint128) private balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping (address => address) public override delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint128 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    // XXX: deleted PERMIT_TYPEHASH\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    // XXX: deleted MinterChanged\\n\\n    // XXX: deleted DelegateChanged, DelegateVotesChanged, Transfer and moved them to IVotingPower\\n\\n    // XXX: deleted Approval\\n\\n    // XXX: deleted constructor, setMinter, mint, allowance, approve, permit, balanceOf\\n\\n    // XXX: deleted transfer, transferFrom\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public override {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public override {\\n        // XXX_CHANGED: name => _name\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(_name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"Uni::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"Uni::delegateBySig: invalid nonce\\\");\\n        // XXX: added linter disable\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= expiry, \\\"Uni::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view override returns (uint128) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber) public view override returns (uint128) {\\n        require(blockNumber < block.number, \\\"Uni::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint128 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(address src, address dst, uint128 amount) internal {\\n        require(src != address(0), \\\"Uni::_transferTokens: cannot transfer from the zero address\\\");\\n        require(dst != address(0), \\\"Uni::_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[src] = sub128(balances[src], amount, \\\"Uni::_transferTokens: transfer amount exceeds balance\\\");\\n        balances[dst] = add128(balances[dst], amount, \\\"Uni::_transferTokens: transfer amount overflows\\\");\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint128 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint128 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint128 srcRepNew = sub128(srcRepOld, amount, \\\"Uni::_moveVotes: vote amount underflows\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint128 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint128 dstRepNew = add128(dstRepOld, amount, \\\"Uni::_moveVotes: vote amount overflows\\\");\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint128 oldVotes, uint128 newVotes) internal {\\n      uint32 blockNumber = safe32(block.number, \\\"Uni::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n      } else {\\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n          numCheckpoints[delegatee] = nCheckpoints + 1;\\n      }\\n\\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe128(uint n, string memory errorMessage) internal pure returns (uint128) {\\n        require(n < 2**128, errorMessage);\\n        return uint128(n);\\n    }\\n\\n    function add128(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\\n        uint128 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub128(uint128 a, uint128 b, string memory errorMessage) internal pure returns (uint128) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal view returns (uint) {\\n        uint256 chainId;\\n        // XXX: added linter disable\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0xcca7a316011179528c39ce264be943cb694819a02fa0886ee906d64f8e663cc0\",\"license\":\"MIT\"},\"contracts/ubeswap/voting/VotingToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"../interfaces/INonTransferrableToken.sol\\\";\\nimport \\\"./VotingPower.sol\\\";\\n\\n/**\\n * A non-transferrable token that can vote.\\n */\\ncontract VotingToken is INonTransferrableToken, VotingPower {\\n    string private _symbol;\\n    uint8 private immutable _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) VotingPower(name_) {\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    function name()\\n        public\\n        view\\n        override(INonTransferrableToken, VotingPower)\\n        returns (string memory)\\n    {\\n        return VotingPower.name();\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return totalVotingPower();\\n    }\\n\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return votingPower(_account);\\n    }\\n}\\n\",\"keccak256\":\"0x077a1da1011d51c9a7e808516cddb1e1e3de4d35594804cb4728db654d04f5af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516145b13803806145b183398101604081905261002f91610044565b6001600160a01b03166080523360a052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160a0516144f86100b960003960008181605d0152818160fa015281816105e4015281816106da01526107d001526000818160a201526101eb01526144f86000f3fe60806040523480156200001157600080fd5b5060043610620000525760003560e01c8063570ca7351462000057578063b31c710a146200009c578063c52046de14620000c4578063fe3e108a14620000e3575b600080fd5b6200007f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6200007f7f000000000000000000000000000000000000000000000000000000000000000081565b600054620000d29060ff1681565b604051901515815260200162000093565b620000ed620000ef565b005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146200015d5760405162461bcd60e51b815260206004820152600d60248201526c27b7363c9037b832b930ba37b960991b60448201526064015b60405180910390fd5b60005460ff1615620001a55760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e4819195c1b1bde595960821b604482015260640162000154565b600030604051620001b6906200083d565b6001600160a01b039091168152602001604051809103906000f080158015620001e3573d6000803e3d6000fd5b5090506000817f0000000000000000000000000000000000000000000000000000000000000000426200021b816301e1338062000859565b60646040516200022b906200084b565b6001600160a01b03958616815294909316602085015260408401919091526060830152608082015260a001604051809103906000f08015801562000273573d6000803e3d6000fd5b5060405163a9059cbb60e01b81526001600160a01b0380831660048301526b1027e72f1f1281308800000060248301529192509083169063a9059cbb906044016020604051808303816000875af1158015620002d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002f9919062000881565b5060405163a9059cbb60e01b81527359aac0b8bd03b7ba9d391eb989c3ea8cde63814460048201526b50c783eb9b5c85f2a800000060248201526001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801562000367573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200038d919062000881565b5060405163a9059cbb60e01b815273bd11caea0a854ba328e202ced2f0269fd8027c6e60048201526b50c783eb9b5c85f2a800000060248201526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015620003fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000421919062000881565b5060405163a9059cbb60e01b815273213962ba8e4cef1d618c88d62d2ffa39ec5eb22d60048201526b60ef6b1aba6f07233000000060248201526001600160a01b0383169063a9059cbb906044016020604051808303816000875af11580156200048f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004b5919062000881565b5060405163a9059cbb60e01b8152733844cb665cf676b1eb7c896e04d3e9ec3bab5a7560048201526b3077b58d5d3783919800000060248201526001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801562000523573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000549919062000881565b50806001600160a01b0316632f2ff15d826001600160a01b031663a217fddf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000598573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005be9190620008ac565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604401600060405180830381600087803b1580156200062757600080fd5b505af11580156200063c573d6000803e3d6000fd5b50505050806001600160a01b0316632f2ff15d826001600160a01b031663570618e16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200068e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006b49190620008ac565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604401600060405180830381600087803b1580156200071d57600080fd5b505af115801562000732573d6000803e3d6000fd5b50505050806001600160a01b0316632f2ff15d826001600160a01b031663e63ab1e96040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000784573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007aa9190620008ac565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604401600060405180830381600087803b1580156200081357600080fd5b505af115801562000828573d6000803e3d6000fd5b50506000805460ff1916600117905550505050565b612a5180620008c783390190565b6111ab806200331883390190565b808201808211156200087b57634e487b7160e01b600052601160045260246000fd5b92915050565b6000602082840312156200089457600080fd5b81518015158114620008a557600080fd5b9392505050565b600060208284031215620008bf57600080fd5b505191905056fe60a06040523480156200001157600080fd5b5060405162002a5138038062002a51833981016040819052620000349162000725565b6040518060400160405280600c81526020016b1a5b5c1858dd13585c9ad95d60a21b81525060405180604001604052806004815260200163141050d560e21b81525060126c01431e0fae6d7217caa0000000848484848280600090816200009c9190620007f5565b5060079050620000ad8382620007f5565b5060ff1660805250620000c390508183620000cf565b505050505050620009b5565b6001600160a01b038216620001515760405162461bcd60e51b815260206004820152603860248201527f566f74696e67506f7765723a3a5f6d696e74566f7465733a2063616e6e6f742060448201527f6d696e7420746f20746865207a65726f2061646472657373000000000000000060648201526084015b60405180910390fd5b6001600160a01b03821660009081526002602090815260409182902054825160608101909352602e8084526200019f936001600160801b03909216928592919062002974908301396200028d565b6001600160a01b03831660009081526002602090815260409182902080546001600160801b0319166001600160801b03948516179055600154825160608101909352602f808452620002039491909116928592909190620029a2908301396200028d565b600180546001600160801b0319166001600160801b0392831617905560405190821681526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36001600160a01b0380831660009081526003602052604081205462000289921683620002df565b5050565b6000806200029c8486620008d7565b9050846001600160801b0316816001600160801b031610158390620002d65760405162461bcd60e51b815260040162000148919062000901565b50949350505050565b816001600160a01b0316836001600160a01b0316141580156200030b57506000816001600160801b0316115b15620004a7576001600160a01b03831615620003dc576001600160a01b03831660009081526005602052604081205463ffffffff1690816200034f5760006200039e565b6001600160a01b0385166000908152600460205260408120906200037560018562000952565b63ffffffff16815260208101919091526040016000205464010000000090046001600160801b03165b90506000620003c8828560405180606001604052806027815260200162002a2a60279139620004ac565b9050620003d886848484620004fb565b5050505b6001600160a01b03821615620004a7576001600160a01b03821660009081526005602052604081205463ffffffff1690816200041a57600062000469565b6001600160a01b0384166000908152600460205260408120906200044060018562000952565b63ffffffff16815260208101919091526040016000205464010000000090046001600160801b03165b90506000620004938285604051806060016040528060268152602001620029d1602691396200028d565b9050620004a385848484620004fb565b5050505b505050565b6000836001600160801b0316836001600160801b031611158290620004e65760405162461bcd60e51b815260040162000148919062000901565b50620004f3838562000972565b949350505050565b60006200052243604051806060016040528060338152602001620029f760339139620006f2565b905060008463ffffffff161180156200057f57506001600160a01b038516600090815260046020526040812063ffffffff8316916200056360018862000952565b63ffffffff908116825260208201929092526040016000205416145b15620005f2576001600160a01b03851660009081526004602052604081208391620005ac60018862000952565b63ffffffff168152602081019190915260400160002080546001600160801b039290921664010000000002600160201b600160a01b03199092169190911790556200069d565b60408051808201825263ffffffff80841682526001600160801b0380861660208085019182526001600160a01b038b166000908152600482528681208b8616825290915294909420925183549451909116640100000000026001600160a01b03199094169116179190911790556200066c84600162000995565b6001600160a01b0386166000908152600560205260409020805463ffffffff191663ffffffff929092169190911790555b604080516001600160801b038086168252841660208201526001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a25050505050565b60008164010000000084106200071d5760405162461bcd60e51b815260040162000148919062000901565b509192915050565b6000602082840312156200073857600080fd5b81516001600160a01b03811681146200075057600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200078257607f821691505b602082108103620007a357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004a7576000816000526020600020601f850160051c81016020861015620007d45750805b601f850160051c820191505b81811015620004a357828155600101620007e0565b81516001600160401b0381111562000811576200081162000757565b62000829816200082284546200076d565b84620007a9565b602080601f831160018114620008615760008415620008485750858301515b600019600386901b1c1916600185901b178555620004a3565b600085815260208120601f198616915b82811015620008925788860151825594840194600190910190840162000871565b5085821015620008b15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b6001600160801b03818116838216019080821115620008fa57620008fa620008c1565b5092915050565b60006020808352835180602085015260005b81811015620009315785810183015185820160400152820162000913565b506000604082860101526040601f19601f8301168501019250505092915050565b63ffffffff828116828216039080821115620008fa57620008fa620008c1565b6001600160801b03828116828216039080821115620008fa57620008fa620008c1565b63ffffffff818116838216019080821115620008fa57620008fa620008c1565b608051611fa3620009d1600039600061021c0152611fa36000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063c07473f61161007c578063c07473f6146103a7578063c3cda520146103b5578063d505accf146103c8578063dd62ed3e146103db578063e7a324dc1461041d578063f1127ed81461044457600080fd5b806370a0823114610314578063782d6fe1146103465780637ecebe001461035957806395d89b4114610379578063a9059cbb14610381578063b4b5ea571461039457600080fd5b8063313ce56711610115578063313ce5671461021557806332cb6b0c14610246578063587cde1e146102725780635c19a95c146102b3578063671b3793146102c85780636fcfff45146102d957600080fd5b806306fdde031461015d578063095ea7b31461017b57806318160ddd1461019e57806320606b70146101b457806323b872dd146101db57806330adf81f146101ee575b600080fd5b6101656104ab565b60405161017291906119f0565b60405180910390f35b61018e610189366004611a5b565b6104ba565b6040519015158152602001610172565b6101a661057a565b604051908152602001610172565b6101a67f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61018e6101e9366004611a85565b61059c565b6101a67f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610172565b61025a6c01431e0fae6d7217caa000000081565b6040516001600160801b039091168152602001610172565b61029b610280366004611ac1565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610172565b6102c66102c1366004611ac1565b610773565b005b6001546001600160801b031661025a565b6102ff6102e7366004611ac1565b60056020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610172565b6101a6610322366004611ac1565b6001600160a01b03166000908152600260205260409020546001600160801b031690565b61025a610354366004611a5b565b610780565b6101a6610367366004611ac1565b60066020526000908152604090205481565b610165610a09565b61018e61038f366004611a5b565b610a9b565b61025a6103a2366004611ac1565b610b61565b61025a610322366004611ac1565b6102c66103c3366004611aed565b610bdf565b6102c66103d6366004611b45565b610eb2565b6101a66103e9366004611baf565b6001600160a01b0391821660009081526008602090815260408083209390941682529190915220546001600160801b031690565b6101a67fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b610487610452366004611be2565b600460209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160801b031682565b6040805163ffffffff90931683526001600160801b03909116602083015201610172565b60606104b5611282565b905090565b60008060001983036104d457506001600160801b036104f9565b6104f683604051806060016040528060258152602001611ea960259139611291565b90505b3360008181526008602090815260408083206001600160a01b0389168085529083529281902080546001600160801b0319166001600160801b03871690811790915590519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a360019150505b92915050565b600061058e6001546001600160801b031690565b6001600160801b0316905090565b6000306001600160a01b038416036106305760405162461bcd60e51b815260206004820152604660248201527f5472616e736665727261626c65566f74696e67546f6b656e3a3a7472616e736660448201527f657246726f6d3a2063616e6e6f742073656e6420746f6b656e7320746f20636f6064820152651b9d1c9858dd60d21b608482015260a4015b60405180910390fd5b6001600160a01b03841660009081526008602090815260408083203380855290835281842054825160608101909352602580845291946001600160801b03909116939092610686928892611ea990830139611291565b9050866001600160a01b0316836001600160a01b0316141580156106b357506001600160801b0382811614155b1561075b5760006106dd83836040518060600160405280603c8152602001611ddf603c91396112c0565b6001600160a01b038981166000818152600860209081526040808320948a168084529482529182902080546001600160801b0319166001600160801b0387169081179091559151918252939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b61076687878361130a565b5060019695505050505050565b61077d338261155b565b50565b60004382106107e05760405162461bcd60e51b815260206004820152602660248201527f556e693a3a6765745072696f72566f7465733a206e6f742079657420646574656044820152651c9b5a5b995960d21b6064820152608401610627565b6001600160a01b03831660009081526005602052604081205463ffffffff1690819003610811576000915050610574565b6001600160a01b03841660009081526004602052604081208491610836600185611c38565b63ffffffff908116825260208201929092526040016000205416116108a9576001600160a01b038416600090815260046020526040812090610879600184611c38565b63ffffffff168152602081019190915260400160002054600160201b90046001600160801b031691506105749050565b6001600160a01b038416600090815260046020908152604080832083805290915290205463ffffffff168310156108e4576000915050610574565b6000806108f2600184611c38565b90505b8163ffffffff168163ffffffff1611156109c457600060026109178484611c38565b6109219190611c5c565b61092b9083611c38565b6001600160a01b038816600090815260046020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160801b031691810191909152919250879003610998576020015194506105749350505050565b805163ffffffff168711156109af578193506109bd565b6109ba600183611c38565b92505b50506108f5565b506001600160a01b038516600090815260046020908152604080832063ffffffff909416835292905220546001600160801b03600160201b9091041691505092915050565b606060078054610a1890611c8d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4490611c8d565b8015610a915780601f10610a6657610100808354040283529160200191610a91565b820191906000526020600020905b815481529060010190602001808311610a7457829003601f168201915b5050505050905090565b6000306001600160a01b03841603610b265760405162461bcd60e51b815260206004820152604260248201527f5472616e736665727261626c65566f74696e67546f6b656e3a3a7472616e736660448201527f65723a2063616e6e6f742073656e6420746f6b656e7320746f20636f6e74726160648201526118dd60f21b608482015260a401610627565b6000610b4a83604051806060016040528060268152602001611f4860269139611291565b9050610b5733858361130a565b5060019392505050565b6001600160a01b03811660009081526005602052604081205463ffffffff1680610b8c576000610bd8565b6001600160a01b038316600090815260046020526040812090610bb0600184611c38565b63ffffffff168152602081019190915260400160002054600160201b90046001600160801b03165b9392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666000604051610c119190611cc7565b6040518091039020610c204690565b60408051602080820195909552808201939093526060830191909152306080808401919091528151808403909101815260a0830182528051908401207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08401526001600160a01b038b1660e084015261010083018a90526101208084018a90528251808503909101815261014084019092528151919093012061190160f01b610160830152610162820183905261018282018190529192506000906101a20160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015610d4c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610dbd5760405162461bcd60e51b815260206004820152602560248201527f556e693a3a64656c656761746542795369673a20696e76616c6964207369676e604482015264617475726560d81b6064820152608401610627565b6001600160a01b0381166000908152600660205260408120805491610de183611d68565b919050558914610e3d5760405162461bcd60e51b815260206004820152602160248201527f556e693a3a64656c656761746542795369673a20696e76616c6964206e6f6e636044820152606560f81b6064820152608401610627565b87421115610e9b5760405162461bcd60e51b815260206004820152602560248201527f556e693a3a64656c656761746542795369673a207369676e61747572652065786044820152641c1a5c995960da1b6064820152608401610627565b610ea5818b61155b565b505050505b505050505050565b60006000198603610ecb57506001600160801b03610ef0565b610eed86604051806060016040528060248152602001611ef560249139611291565b90505b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866610f1b6104ab565b80519060200120610f294690565b604080516020810194909452830191909152606082015230608082015260a00160408051601f1981840301815291815281516020928301206001600160a01b038c166000908152600690935290822080549193507f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918c918c918c9186610faf83611d68565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e0016040516020818303038152906040528051906020012090506000828260405160200161102e92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff8b169284019290925260608301899052608083018890529092509060019060a0016020604051602081039080840390855afa158015611099573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166110fc5760405162461bcd60e51b815260206004820152601e60248201527f556e693a3a7065726d69743a20696e76616c6964207369676e617475726500006044820152606401610627565b8b6001600160a01b0316816001600160a01b03161461115d5760405162461bcd60e51b815260206004820152601960248201527f556e693a3a7065726d69743a20756e617574686f72697a6564000000000000006044820152606401610627565b884211156111ad5760405162461bcd60e51b815260206004820152601e60248201527f556e693a3a7065726d69743a207369676e6174757265206578706972656400006044820152606401610627565b84600860008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160801b0302191690836001600160801b031602179055508a6001600160a01b03168c6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258760405161126c91906001600160801b0391909116815260200190565b60405180910390a3505050505050505050505050565b606060008054610a1890611c8d565b600081600160801b84106112b85760405162461bcd60e51b815260040161062791906119f0565b509192915050565b6000836001600160801b0316836001600160801b0316111582906112f75760405162461bcd60e51b815260040161062791906119f0565b506113028385611d81565b949350505050565b6001600160a01b0383166113865760405162461bcd60e51b815260206004820152603b60248201527f556e693a3a5f7472616e73666572546f6b656e733a2063616e6e6f742074726160448201527f6e736665722066726f6d20746865207a65726f206164647265737300000000006064820152608401610627565b6001600160a01b0382166114025760405162461bcd60e51b815260206004820152603960248201527f556e693a3a5f7472616e73666572546f6b656e733a2063616e6e6f742074726160448201527f6e7366657220746f20746865207a65726f2061646472657373000000000000006064820152608401610627565b6001600160a01b03831660009081526002602090815260409182902054825160608101909352603580845261144d936001600160801b039092169285929190611e1b908301396112c0565b6001600160a01b03848116600090815260026020908152604080832080546001600160801b0319166001600160801b0396871617905592861682529082902054825160608101909352602f8084526114b59491909116928592909190611f19908301396115e5565b6001600160a01b0383811660008181526002602090815260409182902080546001600160801b0319166001600160801b03968716179055905193851684529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36001600160a01b0380841660009081526003602052604080822054858416835291205461155692918216911683611632565b505050565b6001600160a01b03808316600081815260036020818152604080842080546002845282862054949093528787166001600160a01b031984168117909155905191909516946001600160801b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46115df828483611632565b50505050565b6000806115f28486611da1565b9050846001600160801b0316816001600160801b0316101583906116295760405162461bcd60e51b815260040161062791906119f0565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561165d57506000816001600160801b0316115b15611556576001600160a01b03831615611722576001600160a01b03831660009081526005602052604081205463ffffffff16908161169d5760006116e9565b6001600160a01b0385166000908152600460205260408120906116c1600185611c38565b63ffffffff168152602081019190915260400160002054600160201b90046001600160801b03165b905060006117108285604051806060016040528060278152602001611ece602791396112c0565b905061171e868484846117da565b5050505b6001600160a01b03821615611556576001600160a01b03821660009081526005602052604081205463ffffffff16908161175d5760006117a9565b6001600160a01b038416600090815260046020526040812090611781600185611c38565b63ffffffff168152602081019190915260400160002054600160201b90046001600160801b03165b905060006117d08285604051806060016040528060268152602001611e50602691396115e5565b9050610eaa858484845b60006117fe43604051806060016040528060338152602001611e76603391396119cd565b905060008463ffffffff1611801561185857506001600160a01b038516600090815260046020526040812063ffffffff83169161183c600188611c38565b63ffffffff908116825260208201929092526040016000205416145b156118d0576001600160a01b03851660009081526004602052604081208391611882600188611c38565b63ffffffff168152602081019190915260400160002080546001600160801b0392909216600160201b0273ffffffffffffffffffffffffffffffff0000000019909216919091179055611978565b60408051808201825263ffffffff80841682526001600160801b0380861660208085019182526001600160a01b038b166000908152600482528681208b8616825290915294909420925183549451909116600160201b026001600160a01b0319909416911617919091179055611947846001611dc1565b6001600160a01b0386166000908152600560205260409020805463ffffffff191663ffffffff929092169190911790555b604080516001600160801b038086168252841660208201526001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a25050505050565b600081600160201b84106112b85760405162461bcd60e51b815260040161062791905b60006020808352835180602085015260005b81811015611a1e57858101830151858201604001528201611a02565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114611a5657600080fd5b919050565b60008060408385031215611a6e57600080fd5b611a7783611a3f565b946020939093013593505050565b600080600060608486031215611a9a57600080fd5b611aa384611a3f565b9250611ab160208501611a3f565b9150604084013590509250925092565b600060208284031215611ad357600080fd5b610bd882611a3f565b803560ff81168114611a5657600080fd5b60008060008060008060c08789031215611b0657600080fd5b611b0f87611a3f565b95506020870135945060408701359350611b2b60608801611adc565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a031215611b6057600080fd5b611b6988611a3f565b9650611b7760208901611a3f565b95506040880135945060608801359350611b9360808901611adc565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215611bc257600080fd5b611bcb83611a3f565b9150611bd960208401611a3f565b90509250929050565b60008060408385031215611bf557600080fd5b611bfe83611a3f565b9150602083013563ffffffff81168114611c1757600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b63ffffffff828116828216039080821115611c5557611c55611c22565b5092915050565b600063ffffffff80841680611c8157634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b600181811c90821680611ca157607f821691505b602082108103611cc157634e487b7160e01b600052602260045260246000fd5b50919050565b60008083548160018260011c91506001831680611ce557607f831692505b60208084108203611d0457634e487b7160e01b86526022600452602486fd5b818015611d185760018114611d2d57611d5a565b60ff1986168952841515850289019650611d5a565b60008a81526020902060005b86811015611d525781548b820152908501908301611d39565b505084890196505b509498975050505050505050565b600060018201611d7a57611d7a611c22565b5060010190565b6001600160801b03828116828216039080821115611c5557611c55611c22565b6001600160801b03818116838216019080821115611c5557611c55611c22565b63ffffffff818116838216019080821115611c5557611c55611c2256fe556e693a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e6365556e693a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773556e693a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473556e693a3a617070726f76653a20616d6f756e742065786365656473203132382062697473556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773556e693a3a7065726d69743a20616d6f756e742065786365656473203132382062697473556e693a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f7773556e693a3a7472616e736665723a20616d6f756e742065786365656473203132382062697473a2646970667358221220a14f6e6f05f067a707c130fa1e1d414d440f118bda51107d9776e1be596553d864736f6c63430008170033566f74696e67506f7765723a3a5f6d696e74566f7465733a206d696e7420616d6f756e74206f766572666c6f7773566f74696e67506f7765723a3a5f6d696e74566f7465733a20746f74616c20737570706c79206f766572666c6f7773556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773556e693a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f777360a06040527f40cc61446500997553335804a3bc667fcdbb918167482bcec9014f614ca4ecd86080523480156200003557600080fd5b50604051620011ab380380620011ab8339810160408190526200005891620001d2565b60016000908155600280546001600160a81b0319166101006001600160a01b038981169190910291909117909155600380546001600160a01b031916918716919091179055600484905560058390556006829055620000b890336200011e565b50620000e57f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336200011e565b50620001127f8619cecd8b9e095ab43867f5b69d492180450fe862e6b50bfbfb24b75dd84c8a336200011e565b50505050505062000225565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff16620001ab5760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a4506001620001af565b5060005b92915050565b80516001600160a01b0381168114620001cd57600080fd5b919050565b600080600080600060a08688031215620001eb57600080fd5b620001f686620001b5565b94506200020660208701620001b5565b6040870151606088015160809098015196999198509695945092505050565b608051610f6362000248600039600081816101bc015261060f0152610f636000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806366d49506116100de578063b31998e511610097578063d9caed1211610071578063d9caed121461033e578063db068e0e14610351578063e63ab1e914610364578063f04a0bd41461038b57600080fd5b8063b31998e514610302578063c24a0f8b14610322578063d547741f1461032b57600080fd5b806366d49506146102ab57806382d95df5146102c35780638456cb59146102d6578063909c2c94146102de57806391d14854146102e7578063a217fddf146102fa57600080fd5b806336568abe1161013057806336568abe146102425780633784f000146102555780633ba0b9a9146102685780633f4ba83a14610271578063570618e1146102795780635c975abb146102a057600080fd5b806301ffc9a7146101785780630b97bc86146101a05780630edc4737146101b75780631392bea0146101de578063248a9ca3146102095780632f2ff15d1461022d575b600080fd5b61018b610186366004610cd7565b61039e565b60405190151581526020015b60405180910390f35b6101a960045481565b604051908152602001610197565b6101a97f000000000000000000000000000000000000000000000000000000000000000081565b6003546101f1906001600160a01b031681565b6040516001600160a01b039091168152602001610197565b6101a9610217366004610d01565b6000908152600160208190526040909120015490565b61024061023b366004610d36565b6103af565b005b610240610250366004610d36565b6103db565b610240610263366004610d01565b610413565b6101a960065481565b610240610424565b6101a97f8619cecd8b9e095ab43867f5b69d492180450fe862e6b50bfbfb24b75dd84c8a81565b60025460ff1661018b565b6002546101f19061010090046001600160a01b031681565b6102406102d1366004610d01565b610459565b61024061046a565b6101a960075481565b61018b6102f5366004610d36565b61049c565b6101a9600081565b6101a9610310366004610d62565b60086020526000908152604090205481565b6101a960055481565b610240610339366004610d36565b6104c7565b61018b61034c366004610d7d565b6104ed565b61024061035f366004610d01565b6105e6565b6101a97f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b61018b610399366004610dcf565b6105f7565b60006103a982610957565b92915050565b600082815260016020819052604090912001546103cb8161098c565b6103d58383610996565b50505050565b6001600160a01b03811633146104045760405163334bd91960e11b815260040160405180910390fd5b61040e8282610a0f565b505050565b600061041e8161098c565b50600555565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61044e8161098c565b610456610a7c565b50565b60006104648161098c565b50600455565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6104948161098c565b610456610ace565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600082815260016020819052604090912001546104e38161098c565b6103d58383610a0f565b6000806104f98161098c565b6001600160a01b038416610565576000856001600160a01b03168460405160006040518083038185875af1925050503d8060008114610554576040519150601f19603f3d011682016040523d82523d6000602084013e610559565b606091505b509093506105de915050565b60405163a9059cbb60e01b81526001600160a01b0386811660048301526024820185905285169063a9059cbb906044016020604051808303816000875af11580156105b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d89190610e93565b50600191505b509392505050565b60006105f18161098c565b50600655565b6000610601610b0b565b610609610b35565b604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff193360601b1682840152605480830187905283518084039091018152607490920190925280519101207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c812090806106a98386610b5b565b50909250905060008160038111156106c3576106c3610eb5565b1480156106f557506106f57f8619cecd8b9e095ab43867f5b69d492180450fe862e6b50bfbfb24b75dd84c8a8361049c565b6107465760405162461bcd60e51b815260206004820152601760248201527f596f7520617265206e6f742077686974656c697374656400000000000000000060448201526064015b60405180910390fd5b600454421015801561075a57506005544211155b6107a65760405162461bcd60e51b815260206004820152601860248201527f436f6e76657273696f6e206973206e6f74206163746976650000000000000000604482015260640161073d565b33600090815260086020526040812054906107c18983610ee1565b9050878111156107ff5760405162461bcd60e51b81526020600482015260096024820152681b585e081b1a5b5a5d60ba1b604482015260640161073d565b336000908152600860205260408120829055600780548b9290610823908490610ee1565b90915550506003546040516323b872dd60e01b8152336004820152306024820152604481018b90526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a39190610e93565b50600060646006548b6108b69190610ef4565b6108c09190610f0b565b60025460405163a9059cbb60e01b81523360048201526024810183905291925061010090046001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b9190610e93565b50600196505050505050506109506001600055565b9392505050565b60006001600160e01b03198216637965db0b60e01b14806103a957506301ffc9a760e01b6001600160e01b03198316146103a9565b6104568133610ba8565b60006109a2838361049c565b610a075760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45060016103a9565b5060006103a9565b6000610a1b838361049c565b15610a075760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016103a9565b610a84610be5565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b610ad6610b35565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610ab13390565b600260005403610b2e57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60025460ff1615610b595760405163d93c066560e01b815260040160405180910390fd5b565b60008060008351604103610b955760208401516040850151606086015160001a610b8788828585610c08565b955095509550505050610ba1565b50508151600091506002905b9250925092565b610bb2828261049c565b610be15760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161073d565b5050565b60025460ff16610b5957604051638dfc202b60e01b815260040160405180910390fd5b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610c435750600091506003905082610ccd565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610c97573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610cc357506000925060019150829050610ccd565b9250600091508190505b9450945094915050565b600060208284031215610ce957600080fd5b81356001600160e01b03198116811461095057600080fd5b600060208284031215610d1357600080fd5b5035919050565b80356001600160a01b0381168114610d3157600080fd5b919050565b60008060408385031215610d4957600080fd5b82359150610d5960208401610d1a565b90509250929050565b600060208284031215610d7457600080fd5b61095082610d1a565b600080600060608486031215610d9257600080fd5b610d9b84610d1a565b9250610da960208501610d1a565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215610de457600080fd5b8335925060208401359150604084013567ffffffffffffffff80821115610e0a57600080fd5b818601915086601f830112610e1e57600080fd5b813581811115610e3057610e30610db9565b604051601f8201601f19908116603f01168101908382118183101715610e5857610e58610db9565b81604052828152896020848701011115610e7157600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600060208284031215610ea557600080fd5b8151801515811461095057600080fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156103a9576103a9610ecb565b80820281158282048414176103a9576103a9610ecb565b600082610f2857634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205aaad00a3190b68507b7904dda15f9a6c64d2564f474c353bf4faa0d63130bb164736f6c63430008170033a26469706673582212202e313d6a3688f4e87765dada0fcb8cbce63d6e71f57c6db277034a65d7b1ec3b64736f6c63430008170033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000525760003560e01c8063570ca7351462000057578063b31c710a146200009c578063c52046de14620000c4578063fe3e108a14620000e3575b600080fd5b6200007f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6200007f7f000000000000000000000000000000000000000000000000000000000000000081565b600054620000d29060ff1681565b604051901515815260200162000093565b620000ed620000ef565b005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146200015d5760405162461bcd60e51b815260206004820152600d60248201526c27b7363c9037b832b930ba37b960991b60448201526064015b60405180910390fd5b60005460ff1615620001a55760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e4819195c1b1bde595960821b604482015260640162000154565b600030604051620001b6906200083d565b6001600160a01b039091168152602001604051809103906000f080158015620001e3573d6000803e3d6000fd5b5090506000817f0000000000000000000000000000000000000000000000000000000000000000426200021b816301e1338062000859565b60646040516200022b906200084b565b6001600160a01b03958616815294909316602085015260408401919091526060830152608082015260a001604051809103906000f08015801562000273573d6000803e3d6000fd5b5060405163a9059cbb60e01b81526001600160a01b0380831660048301526b1027e72f1f1281308800000060248301529192509083169063a9059cbb906044016020604051808303816000875af1158015620002d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002f9919062000881565b5060405163a9059cbb60e01b81527359aac0b8bd03b7ba9d391eb989c3ea8cde63814460048201526b50c783eb9b5c85f2a800000060248201526001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801562000367573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200038d919062000881565b5060405163a9059cbb60e01b815273bd11caea0a854ba328e202ced2f0269fd8027c6e60048201526b50c783eb9b5c85f2a800000060248201526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015620003fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000421919062000881565b5060405163a9059cbb60e01b815273213962ba8e4cef1d618c88d62d2ffa39ec5eb22d60048201526b60ef6b1aba6f07233000000060248201526001600160a01b0383169063a9059cbb906044016020604051808303816000875af11580156200048f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004b5919062000881565b5060405163a9059cbb60e01b8152733844cb665cf676b1eb7c896e04d3e9ec3bab5a7560048201526b3077b58d5d3783919800000060248201526001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801562000523573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000549919062000881565b50806001600160a01b0316632f2ff15d826001600160a01b031663a217fddf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000598573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005be9190620008ac565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604401600060405180830381600087803b1580156200062757600080fd5b505af11580156200063c573d6000803e3d6000fd5b50505050806001600160a01b0316632f2ff15d826001600160a01b031663570618e16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200068e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006b49190620008ac565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604401600060405180830381600087803b1580156200071d57600080fd5b505af115801562000732573d6000803e3d6000fd5b50505050806001600160a01b0316632f2ff15d826001600160a01b031663e63ab1e96040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000784573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007aa9190620008ac565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604401600060405180830381600087803b1580156200081357600080fd5b505af115801562000828573d6000803e3d6000fd5b50506000805460ff1916600117905550505050565b612a5180620008c783390190565b6111ab806200331883390190565b808201808211156200087b57634e487b7160e01b600052601160045260246000fd5b92915050565b6000602082840312156200089457600080fd5b81518015158114620008a557600080fd5b9392505050565b600060208284031215620008bf57600080fd5b505191905056fe60a06040523480156200001157600080fd5b5060405162002a5138038062002a51833981016040819052620000349162000725565b6040518060400160405280600c81526020016b1a5b5c1858dd13585c9ad95d60a21b81525060405180604001604052806004815260200163141050d560e21b81525060126c01431e0fae6d7217caa0000000848484848280600090816200009c9190620007f5565b5060079050620000ad8382620007f5565b5060ff1660805250620000c390508183620000cf565b505050505050620009b5565b6001600160a01b038216620001515760405162461bcd60e51b815260206004820152603860248201527f566f74696e67506f7765723a3a5f6d696e74566f7465733a2063616e6e6f742060448201527f6d696e7420746f20746865207a65726f2061646472657373000000000000000060648201526084015b60405180910390fd5b6001600160a01b03821660009081526002602090815260409182902054825160608101909352602e8084526200019f936001600160801b03909216928592919062002974908301396200028d565b6001600160a01b03831660009081526002602090815260409182902080546001600160801b0319166001600160801b03948516179055600154825160608101909352602f808452620002039491909116928592909190620029a2908301396200028d565b600180546001600160801b0319166001600160801b0392831617905560405190821681526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a36001600160a01b0380831660009081526003602052604081205462000289921683620002df565b5050565b6000806200029c8486620008d7565b9050846001600160801b0316816001600160801b031610158390620002d65760405162461bcd60e51b815260040162000148919062000901565b50949350505050565b816001600160a01b0316836001600160a01b0316141580156200030b57506000816001600160801b0316115b15620004a7576001600160a01b03831615620003dc576001600160a01b03831660009081526005602052604081205463ffffffff1690816200034f5760006200039e565b6001600160a01b0385166000908152600460205260408120906200037560018562000952565b63ffffffff16815260208101919091526040016000205464010000000090046001600160801b03165b90506000620003c8828560405180606001604052806027815260200162002a2a60279139620004ac565b9050620003d886848484620004fb565b5050505b6001600160a01b03821615620004a7576001600160a01b03821660009081526005602052604081205463ffffffff1690816200041a57600062000469565b6001600160a01b0384166000908152600460205260408120906200044060018562000952565b63ffffffff16815260208101919091526040016000205464010000000090046001600160801b03165b90506000620004938285604051806060016040528060268152602001620029d1602691396200028d565b9050620004a385848484620004fb565b5050505b505050565b6000836001600160801b0316836001600160801b031611158290620004e65760405162461bcd60e51b815260040162000148919062000901565b50620004f3838562000972565b949350505050565b60006200052243604051806060016040528060338152602001620029f760339139620006f2565b905060008463ffffffff161180156200057f57506001600160a01b038516600090815260046020526040812063ffffffff8316916200056360018862000952565b63ffffffff908116825260208201929092526040016000205416145b15620005f2576001600160a01b03851660009081526004602052604081208391620005ac60018862000952565b63ffffffff168152602081019190915260400160002080546001600160801b039290921664010000000002600160201b600160a01b03199092169190911790556200069d565b60408051808201825263ffffffff80841682526001600160801b0380861660208085019182526001600160a01b038b166000908152600482528681208b8616825290915294909420925183549451909116640100000000026001600160a01b03199094169116179190911790556200066c84600162000995565b6001600160a01b0386166000908152600560205260409020805463ffffffff191663ffffffff929092169190911790555b604080516001600160801b038086168252841660208201526001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a25050505050565b60008164010000000084106200071d5760405162461bcd60e51b815260040162000148919062000901565b509192915050565b6000602082840312156200073857600080fd5b81516001600160a01b03811681146200075057600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200078257607f821691505b602082108103620007a357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004a7576000816000526020600020601f850160051c81016020861015620007d45750805b601f850160051c820191505b81811015620004a357828155600101620007e0565b81516001600160401b0381111562000811576200081162000757565b62000829816200082284546200076d565b84620007a9565b602080601f831160018114620008615760008415620008485750858301515b600019600386901b1c1916600185901b178555620004a3565b600085815260208120601f198616915b82811015620008925788860151825594840194600190910190840162000871565b5085821015620008b15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b6001600160801b03818116838216019080821115620008fa57620008fa620008c1565b5092915050565b60006020808352835180602085015260005b81811015620009315785810183015185820160400152820162000913565b506000604082860101526040601f19601f8301168501019250505092915050565b63ffffffff828116828216039080821115620008fa57620008fa620008c1565b6001600160801b03828116828216039080821115620008fa57620008fa620008c1565b63ffffffff818116838216019080821115620008fa57620008fa620008c1565b608051611fa3620009d1600039600061021c0152611fa36000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806370a08231116100c3578063c07473f61161007c578063c07473f6146103a7578063c3cda520146103b5578063d505accf146103c8578063dd62ed3e146103db578063e7a324dc1461041d578063f1127ed81461044457600080fd5b806370a0823114610314578063782d6fe1146103465780637ecebe001461035957806395d89b4114610379578063a9059cbb14610381578063b4b5ea571461039457600080fd5b8063313ce56711610115578063313ce5671461021557806332cb6b0c14610246578063587cde1e146102725780635c19a95c146102b3578063671b3793146102c85780636fcfff45146102d957600080fd5b806306fdde031461015d578063095ea7b31461017b57806318160ddd1461019e57806320606b70146101b457806323b872dd146101db57806330adf81f146101ee575b600080fd5b6101656104ab565b60405161017291906119f0565b60405180910390f35b61018e610189366004611a5b565b6104ba565b6040519015158152602001610172565b6101a661057a565b604051908152602001610172565b6101a67f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61018e6101e9366004611a85565b61059c565b6101a67f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610172565b61025a6c01431e0fae6d7217caa000000081565b6040516001600160801b039091168152602001610172565b61029b610280366004611ac1565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610172565b6102c66102c1366004611ac1565b610773565b005b6001546001600160801b031661025a565b6102ff6102e7366004611ac1565b60056020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610172565b6101a6610322366004611ac1565b6001600160a01b03166000908152600260205260409020546001600160801b031690565b61025a610354366004611a5b565b610780565b6101a6610367366004611ac1565b60066020526000908152604090205481565b610165610a09565b61018e61038f366004611a5b565b610a9b565b61025a6103a2366004611ac1565b610b61565b61025a610322366004611ac1565b6102c66103c3366004611aed565b610bdf565b6102c66103d6366004611b45565b610eb2565b6101a66103e9366004611baf565b6001600160a01b0391821660009081526008602090815260408083209390941682529190915220546001600160801b031690565b6101a67fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b610487610452366004611be2565b600460209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160801b031682565b6040805163ffffffff90931683526001600160801b03909116602083015201610172565b60606104b5611282565b905090565b60008060001983036104d457506001600160801b036104f9565b6104f683604051806060016040528060258152602001611ea960259139611291565b90505b3360008181526008602090815260408083206001600160a01b0389168085529083529281902080546001600160801b0319166001600160801b03871690811790915590519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a360019150505b92915050565b600061058e6001546001600160801b031690565b6001600160801b0316905090565b6000306001600160a01b038416036106305760405162461bcd60e51b815260206004820152604660248201527f5472616e736665727261626c65566f74696e67546f6b656e3a3a7472616e736660448201527f657246726f6d3a2063616e6e6f742073656e6420746f6b656e7320746f20636f6064820152651b9d1c9858dd60d21b608482015260a4015b60405180910390fd5b6001600160a01b03841660009081526008602090815260408083203380855290835281842054825160608101909352602580845291946001600160801b03909116939092610686928892611ea990830139611291565b9050866001600160a01b0316836001600160a01b0316141580156106b357506001600160801b0382811614155b1561075b5760006106dd83836040518060600160405280603c8152602001611ddf603c91396112c0565b6001600160a01b038981166000818152600860209081526040808320948a168084529482529182902080546001600160801b0319166001600160801b0387169081179091559151918252939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b61076687878361130a565b5060019695505050505050565b61077d338261155b565b50565b60004382106107e05760405162461bcd60e51b815260206004820152602660248201527f556e693a3a6765745072696f72566f7465733a206e6f742079657420646574656044820152651c9b5a5b995960d21b6064820152608401610627565b6001600160a01b03831660009081526005602052604081205463ffffffff1690819003610811576000915050610574565b6001600160a01b03841660009081526004602052604081208491610836600185611c38565b63ffffffff908116825260208201929092526040016000205416116108a9576001600160a01b038416600090815260046020526040812090610879600184611c38565b63ffffffff168152602081019190915260400160002054600160201b90046001600160801b031691506105749050565b6001600160a01b038416600090815260046020908152604080832083805290915290205463ffffffff168310156108e4576000915050610574565b6000806108f2600184611c38565b90505b8163ffffffff168163ffffffff1611156109c457600060026109178484611c38565b6109219190611c5c565b61092b9083611c38565b6001600160a01b038816600090815260046020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160801b031691810191909152919250879003610998576020015194506105749350505050565b805163ffffffff168711156109af578193506109bd565b6109ba600183611c38565b92505b50506108f5565b506001600160a01b038516600090815260046020908152604080832063ffffffff909416835292905220546001600160801b03600160201b9091041691505092915050565b606060078054610a1890611c8d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4490611c8d565b8015610a915780601f10610a6657610100808354040283529160200191610a91565b820191906000526020600020905b815481529060010190602001808311610a7457829003601f168201915b5050505050905090565b6000306001600160a01b03841603610b265760405162461bcd60e51b815260206004820152604260248201527f5472616e736665727261626c65566f74696e67546f6b656e3a3a7472616e736660448201527f65723a2063616e6e6f742073656e6420746f6b656e7320746f20636f6e74726160648201526118dd60f21b608482015260a401610627565b6000610b4a83604051806060016040528060268152602001611f4860269139611291565b9050610b5733858361130a565b5060019392505050565b6001600160a01b03811660009081526005602052604081205463ffffffff1680610b8c576000610bd8565b6001600160a01b038316600090815260046020526040812090610bb0600184611c38565b63ffffffff168152602081019190915260400160002054600160201b90046001600160801b03165b9392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666000604051610c119190611cc7565b6040518091039020610c204690565b60408051602080820195909552808201939093526060830191909152306080808401919091528151808403909101815260a0830182528051908401207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08401526001600160a01b038b1660e084015261010083018a90526101208084018a90528251808503909101815261014084019092528151919093012061190160f01b610160830152610162820183905261018282018190529192506000906101a20160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015610d4c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610dbd5760405162461bcd60e51b815260206004820152602560248201527f556e693a3a64656c656761746542795369673a20696e76616c6964207369676e604482015264617475726560d81b6064820152608401610627565b6001600160a01b0381166000908152600660205260408120805491610de183611d68565b919050558914610e3d5760405162461bcd60e51b815260206004820152602160248201527f556e693a3a64656c656761746542795369673a20696e76616c6964206e6f6e636044820152606560f81b6064820152608401610627565b87421115610e9b5760405162461bcd60e51b815260206004820152602560248201527f556e693a3a64656c656761746542795369673a207369676e61747572652065786044820152641c1a5c995960da1b6064820152608401610627565b610ea5818b61155b565b505050505b505050505050565b60006000198603610ecb57506001600160801b03610ef0565b610eed86604051806060016040528060248152602001611ef560249139611291565b90505b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866610f1b6104ab565b80519060200120610f294690565b604080516020810194909452830191909152606082015230608082015260a00160408051601f1981840301815291815281516020928301206001600160a01b038c166000908152600690935290822080549193507f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918c918c918c9186610faf83611d68565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e0016040516020818303038152906040528051906020012090506000828260405160200161102e92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff8b169284019290925260608301899052608083018890529092509060019060a0016020604051602081039080840390855afa158015611099573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166110fc5760405162461bcd60e51b815260206004820152601e60248201527f556e693a3a7065726d69743a20696e76616c6964207369676e617475726500006044820152606401610627565b8b6001600160a01b0316816001600160a01b03161461115d5760405162461bcd60e51b815260206004820152601960248201527f556e693a3a7065726d69743a20756e617574686f72697a6564000000000000006044820152606401610627565b884211156111ad5760405162461bcd60e51b815260206004820152601e60248201527f556e693a3a7065726d69743a207369676e6174757265206578706972656400006044820152606401610627565b84600860008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160801b0302191690836001600160801b031602179055508a6001600160a01b03168c6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258760405161126c91906001600160801b0391909116815260200190565b60405180910390a3505050505050505050505050565b606060008054610a1890611c8d565b600081600160801b84106112b85760405162461bcd60e51b815260040161062791906119f0565b509192915050565b6000836001600160801b0316836001600160801b0316111582906112f75760405162461bcd60e51b815260040161062791906119f0565b506113028385611d81565b949350505050565b6001600160a01b0383166113865760405162461bcd60e51b815260206004820152603b60248201527f556e693a3a5f7472616e73666572546f6b656e733a2063616e6e6f742074726160448201527f6e736665722066726f6d20746865207a65726f206164647265737300000000006064820152608401610627565b6001600160a01b0382166114025760405162461bcd60e51b815260206004820152603960248201527f556e693a3a5f7472616e73666572546f6b656e733a2063616e6e6f742074726160448201527f6e7366657220746f20746865207a65726f2061646472657373000000000000006064820152608401610627565b6001600160a01b03831660009081526002602090815260409182902054825160608101909352603580845261144d936001600160801b039092169285929190611e1b908301396112c0565b6001600160a01b03848116600090815260026020908152604080832080546001600160801b0319166001600160801b0396871617905592861682529082902054825160608101909352602f8084526114b59491909116928592909190611f19908301396115e5565b6001600160a01b0383811660008181526002602090815260409182902080546001600160801b0319166001600160801b03968716179055905193851684529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36001600160a01b0380841660009081526003602052604080822054858416835291205461155692918216911683611632565b505050565b6001600160a01b03808316600081815260036020818152604080842080546002845282862054949093528787166001600160a01b031984168117909155905191909516946001600160801b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46115df828483611632565b50505050565b6000806115f28486611da1565b9050846001600160801b0316816001600160801b0316101583906116295760405162461bcd60e51b815260040161062791906119f0565b50949350505050565b816001600160a01b0316836001600160a01b03161415801561165d57506000816001600160801b0316115b15611556576001600160a01b03831615611722576001600160a01b03831660009081526005602052604081205463ffffffff16908161169d5760006116e9565b6001600160a01b0385166000908152600460205260408120906116c1600185611c38565b63ffffffff168152602081019190915260400160002054600160201b90046001600160801b03165b905060006117108285604051806060016040528060278152602001611ece602791396112c0565b905061171e868484846117da565b5050505b6001600160a01b03821615611556576001600160a01b03821660009081526005602052604081205463ffffffff16908161175d5760006117a9565b6001600160a01b038416600090815260046020526040812090611781600185611c38565b63ffffffff168152602081019190915260400160002054600160201b90046001600160801b03165b905060006117d08285604051806060016040528060268152602001611e50602691396115e5565b9050610eaa858484845b60006117fe43604051806060016040528060338152602001611e76603391396119cd565b905060008463ffffffff1611801561185857506001600160a01b038516600090815260046020526040812063ffffffff83169161183c600188611c38565b63ffffffff908116825260208201929092526040016000205416145b156118d0576001600160a01b03851660009081526004602052604081208391611882600188611c38565b63ffffffff168152602081019190915260400160002080546001600160801b0392909216600160201b0273ffffffffffffffffffffffffffffffff0000000019909216919091179055611978565b60408051808201825263ffffffff80841682526001600160801b0380861660208085019182526001600160a01b038b166000908152600482528681208b8616825290915294909420925183549451909116600160201b026001600160a01b0319909416911617919091179055611947846001611dc1565b6001600160a01b0386166000908152600560205260409020805463ffffffff191663ffffffff929092169190911790555b604080516001600160801b038086168252841660208201526001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a25050505050565b600081600160201b84106112b85760405162461bcd60e51b815260040161062791905b60006020808352835180602085015260005b81811015611a1e57858101830151858201604001528201611a02565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114611a5657600080fd5b919050565b60008060408385031215611a6e57600080fd5b611a7783611a3f565b946020939093013593505050565b600080600060608486031215611a9a57600080fd5b611aa384611a3f565b9250611ab160208501611a3f565b9150604084013590509250925092565b600060208284031215611ad357600080fd5b610bd882611a3f565b803560ff81168114611a5657600080fd5b60008060008060008060c08789031215611b0657600080fd5b611b0f87611a3f565b95506020870135945060408701359350611b2b60608801611adc565b92506080870135915060a087013590509295509295509295565b600080600080600080600060e0888a031215611b6057600080fd5b611b6988611a3f565b9650611b7760208901611a3f565b95506040880135945060608801359350611b9360808901611adc565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215611bc257600080fd5b611bcb83611a3f565b9150611bd960208401611a3f565b90509250929050565b60008060408385031215611bf557600080fd5b611bfe83611a3f565b9150602083013563ffffffff81168114611c1757600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b63ffffffff828116828216039080821115611c5557611c55611c22565b5092915050565b600063ffffffff80841680611c8157634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b600181811c90821680611ca157607f821691505b602082108103611cc157634e487b7160e01b600052602260045260246000fd5b50919050565b60008083548160018260011c91506001831680611ce557607f831692505b60208084108203611d0457634e487b7160e01b86526022600452602486fd5b818015611d185760018114611d2d57611d5a565b60ff1986168952841515850289019650611d5a565b60008a81526020902060005b86811015611d525781548b820152908501908301611d39565b505084890196505b509498975050505050505050565b600060018201611d7a57611d7a611c22565b5060010190565b6001600160801b03828116828216039080821115611c5557611c55611c22565b6001600160801b03818116838216019080821115611c5557611c55611c22565b63ffffffff818116838216019080821115611c5557611c55611c2256fe556e693a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e6365556e693a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773556e693a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473556e693a3a617070726f76653a20616d6f756e742065786365656473203132382062697473556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773556e693a3a7065726d69743a20616d6f756e742065786365656473203132382062697473556e693a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f7773556e693a3a7472616e736665723a20616d6f756e742065786365656473203132382062697473a2646970667358221220a14f6e6f05f067a707c130fa1e1d414d440f118bda51107d9776e1be596553d864736f6c63430008170033566f74696e67506f7765723a3a5f6d696e74566f7465733a206d696e7420616d6f756e74206f766572666c6f7773566f74696e67506f7765723a3a5f6d696e74566f7465733a20746f74616c20737570706c79206f766572666c6f7773556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773556e693a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f777360a06040527f40cc61446500997553335804a3bc667fcdbb918167482bcec9014f614ca4ecd86080523480156200003557600080fd5b50604051620011ab380380620011ab8339810160408190526200005891620001d2565b60016000908155600280546001600160a81b0319166101006001600160a01b038981169190910291909117909155600380546001600160a01b031916918716919091179055600484905560058390556006829055620000b890336200011e565b50620000e57f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336200011e565b50620001127f8619cecd8b9e095ab43867f5b69d492180450fe862e6b50bfbfb24b75dd84c8a336200011e565b50505050505062000225565b60008281526001602090815260408083206001600160a01b038516845290915281205460ff16620001ab5760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a4506001620001af565b5060005b92915050565b80516001600160a01b0381168114620001cd57600080fd5b919050565b600080600080600060a08688031215620001eb57600080fd5b620001f686620001b5565b94506200020660208701620001b5565b6040870151606088015160809098015196999198509695945092505050565b608051610f6362000248600039600081816101bc015261060f0152610f636000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806366d49506116100de578063b31998e511610097578063d9caed1211610071578063d9caed121461033e578063db068e0e14610351578063e63ab1e914610364578063f04a0bd41461038b57600080fd5b8063b31998e514610302578063c24a0f8b14610322578063d547741f1461032b57600080fd5b806366d49506146102ab57806382d95df5146102c35780638456cb59146102d6578063909c2c94146102de57806391d14854146102e7578063a217fddf146102fa57600080fd5b806336568abe1161013057806336568abe146102425780633784f000146102555780633ba0b9a9146102685780633f4ba83a14610271578063570618e1146102795780635c975abb146102a057600080fd5b806301ffc9a7146101785780630b97bc86146101a05780630edc4737146101b75780631392bea0146101de578063248a9ca3146102095780632f2ff15d1461022d575b600080fd5b61018b610186366004610cd7565b61039e565b60405190151581526020015b60405180910390f35b6101a960045481565b604051908152602001610197565b6101a97f000000000000000000000000000000000000000000000000000000000000000081565b6003546101f1906001600160a01b031681565b6040516001600160a01b039091168152602001610197565b6101a9610217366004610d01565b6000908152600160208190526040909120015490565b61024061023b366004610d36565b6103af565b005b610240610250366004610d36565b6103db565b610240610263366004610d01565b610413565b6101a960065481565b610240610424565b6101a97f8619cecd8b9e095ab43867f5b69d492180450fe862e6b50bfbfb24b75dd84c8a81565b60025460ff1661018b565b6002546101f19061010090046001600160a01b031681565b6102406102d1366004610d01565b610459565b61024061046a565b6101a960075481565b61018b6102f5366004610d36565b61049c565b6101a9600081565b6101a9610310366004610d62565b60086020526000908152604090205481565b6101a960055481565b610240610339366004610d36565b6104c7565b61018b61034c366004610d7d565b6104ed565b61024061035f366004610d01565b6105e6565b6101a97f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b61018b610399366004610dcf565b6105f7565b60006103a982610957565b92915050565b600082815260016020819052604090912001546103cb8161098c565b6103d58383610996565b50505050565b6001600160a01b03811633146104045760405163334bd91960e11b815260040160405180910390fd5b61040e8282610a0f565b505050565b600061041e8161098c565b50600555565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61044e8161098c565b610456610a7c565b50565b60006104648161098c565b50600455565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6104948161098c565b610456610ace565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600082815260016020819052604090912001546104e38161098c565b6103d58383610a0f565b6000806104f98161098c565b6001600160a01b038416610565576000856001600160a01b03168460405160006040518083038185875af1925050503d8060008114610554576040519150601f19603f3d011682016040523d82523d6000602084013e610559565b606091505b509093506105de915050565b60405163a9059cbb60e01b81526001600160a01b0386811660048301526024820185905285169063a9059cbb906044016020604051808303816000875af11580156105b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d89190610e93565b50600191505b509392505050565b60006105f18161098c565b50600655565b6000610601610b0b565b610609610b35565b604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091526bffffffffffffffffffffffff193360601b1682840152605480830187905283518084039091018152607490920190925280519101207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c812090806106a98386610b5b565b50909250905060008160038111156106c3576106c3610eb5565b1480156106f557506106f57f8619cecd8b9e095ab43867f5b69d492180450fe862e6b50bfbfb24b75dd84c8a8361049c565b6107465760405162461bcd60e51b815260206004820152601760248201527f596f7520617265206e6f742077686974656c697374656400000000000000000060448201526064015b60405180910390fd5b600454421015801561075a57506005544211155b6107a65760405162461bcd60e51b815260206004820152601860248201527f436f6e76657273696f6e206973206e6f74206163746976650000000000000000604482015260640161073d565b33600090815260086020526040812054906107c18983610ee1565b9050878111156107ff5760405162461bcd60e51b81526020600482015260096024820152681b585e081b1a5b5a5d60ba1b604482015260640161073d565b336000908152600860205260408120829055600780548b9290610823908490610ee1565b90915550506003546040516323b872dd60e01b8152336004820152306024820152604481018b90526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a39190610e93565b50600060646006548b6108b69190610ef4565b6108c09190610f0b565b60025460405163a9059cbb60e01b81523360048201526024810183905291925061010090046001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b9190610e93565b50600196505050505050506109506001600055565b9392505050565b60006001600160e01b03198216637965db0b60e01b14806103a957506301ffc9a760e01b6001600160e01b03198316146103a9565b6104568133610ba8565b60006109a2838361049c565b610a075760008381526001602081815260408084206001600160a01b0387168086529252808420805460ff19169093179092559051339286917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45060016103a9565b5060006103a9565b6000610a1b838361049c565b15610a075760008381526001602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016103a9565b610a84610be5565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b610ad6610b35565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610ab13390565b600260005403610b2e57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60025460ff1615610b595760405163d93c066560e01b815260040160405180910390fd5b565b60008060008351604103610b955760208401516040850151606086015160001a610b8788828585610c08565b955095509550505050610ba1565b50508151600091506002905b9250925092565b610bb2828261049c565b610be15760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161073d565b5050565b60025460ff16610b5957604051638dfc202b60e01b815260040160405180910390fd5b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610c435750600091506003905082610ccd565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610c97573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610cc357506000925060019150829050610ccd565b9250600091508190505b9450945094915050565b600060208284031215610ce957600080fd5b81356001600160e01b03198116811461095057600080fd5b600060208284031215610d1357600080fd5b5035919050565b80356001600160a01b0381168114610d3157600080fd5b919050565b60008060408385031215610d4957600080fd5b82359150610d5960208401610d1a565b90509250929050565b600060208284031215610d7457600080fd5b61095082610d1a565b600080600060608486031215610d9257600080fd5b610d9b84610d1a565b9250610da960208501610d1a565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215610de457600080fd5b8335925060208401359150604084013567ffffffffffffffff80821115610e0a57600080fd5b818601915086601f830112610e1e57600080fd5b813581811115610e3057610e30610db9565b604051601f8201601f19908116603f01168101908382118183101715610e5857610e58610db9565b81604052828152896020848701011115610e7157600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600060208284031215610ea557600080fd5b8151801515811461095057600080fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156103a9576103a9610ecb565b80820281158282048414176103a9576103a9610ecb565b600082610f2857634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205aaad00a3190b68507b7904dda15f9a6c64d2564f474c353bf4faa0d63130bb164736f6c63430008170033a26469706673582212202e313d6a3688f4e87765dada0fcb8cbce63d6e71f57c6db277034a65d7b1ec3b64736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2915,
        "contract": "contracts/PACTNewTokenDeployer.sol:PACTNewTokenDeployer",
        "label": "isDeployed",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}